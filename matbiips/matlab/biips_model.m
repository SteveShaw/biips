function model = biips_model(filename, data, varargin)

%
% BIIPS_MODEL instantiates a stochastic model under a DAG form 
% model = biips_model(filename, data, 'Propertyname', propertyvalue, ...)
%
%   INPUT: 
%   - filename:     name of the BUGS file which describes the stochastic model
%   - data:         either a struct containing constants and observed values
%                   or a cell of strings containing the names of the variables
%                   whose value will be looked for in the workspace
%   Optional inputs:
%   - sample_data:  boolean to choose if data is generated by the 'data'
%                   block of the BUGS model. default is 'true'
%   - quiet:        boolean to deactivate verbosity. default is 'false'
%
%   OUTPUT:
%   - struct_model: A biips model structure with the following fields:
%                   * id: integer which is an index of the compiled model object
%                     in the internal table of models.
%                   * filename: filename of bug model
%                   * definition: char contening the bugs model
%                   * data: structure containing the data.
%
%   See also BIIPS_INIT
%--------------------------------------------------------------------------
% EXAMPLES:
% data = struct('var1', 0, 'var2', 1.2);
% model = biips_model('model.bug', data, 'sample_data', true);
%
% var1 = 0; var2 = 1.2;
% data_names = {'var1', 'var2'};
% model = biips_model('model.bug', data_names, 'sample_data', true);
% 
%--------------------------------------------------------------------------

% BiiPS Project - Bayesian Inference with interacting Particle Systems
% MatBiips interface
% Authors: Adrien Todeschini, Marc Fuentes, Franï¿½ois Caron
% Copyright (C) Inria
% License: GPL-3
% Jan 2014; Last revision: 18-03-2014
%--------------------------------------------------------------------------


%% PROCESS AND CHECK INPUTS
%%% Check filename
if ~ischar(filename)
    error('Invalid filename: must be a character array.');
elseif ~exist(filename, 'file')
    error('Cannot find BUGS file ''%s''', filename);
end
%%% Process and check optional arguments
optarg_names = {'sample_data', 'quiet'};
optarg_default = {true, false};
optarg_valid = {{true, false}, {'true', 'false'}};
optarg_type = {'logical', 'logical'};
[sample_data, quiet] = parsevar(varargin, optarg_names, optarg_type,...
    optarg_valid, optarg_default);

%%% Processing data argument
if (isa(data, 'cell'))
    data = reshape(data, numel(data), 1);
    
    isch = cellfun(@(x) ischar(x), data);
    ignored_var = data(~isch);
    if (~isempty(ignored_var))
        warning('ignored non character elements in ''data'' cell argument.');
    end
    data = data(isch);
    
    isnum = cellfun(@(x) isnumeric(evalin('base', x)), data, 'ErrorHandler', @(S, varargin) false);
    ignored_var = data(~isnum);
    if (~isempty(ignored_var))
        varnames = sprintf('%s ',ignored_var{:});
        warning('ignored the following (either non numeric or non existent) variables given in ''data'' cell argument: %s ', varnames);
    end
    
    data = data(isnum);
    
    data = cell2struct(cellfun(@(x) evalin('base',x), data, 'UniformOutput', false), data, 1);
end

%% Create console
p = matbiips('make_console');
if (quiet)
  old_verb = matbiips('verbosity', 0);
end

%% Load model and do some checks
matbiips('check_model', p, filename)
matbiips('compile_model', p, data, sample_data, get_seed());

data = matbiips('get_data', p);

if (quiet)
  matbiips('verbosity', old_verb);
end

% Biips model structure
model.id = p;
model.filename = filename;
model.definition = fileread(filename);
model.data = data;

model.class = 'biips';
