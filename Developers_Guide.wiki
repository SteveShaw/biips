====== Developers guide ======

===== Requirements =====

  * git
  * cmake
  * gcc (>= 4.7)
  * boost (>=1.49.0)
  * R (>= 3.0) + Rcpp package
  * Matlab (>=R2011a) or Octave (>=3.6.4)

===== Development tools =====

==== Windows ====

  * PuTTY
  * TortoiseGit + msysgit
  * CMake
  * MinGW (do not add to PATH)
  * R (add to ''%%PATH%%'': ''%%C:\Program Files\R\R-3.0.2\bin%%'') + Rcpp package
  * Rtools (add to ''%%PATH%%'': ''%%C:\Rtools\gcc-4.6.3\bin%%'')
  * RStudio
  * NSIS 2.46
  * MikTeX
  * Matlab
  * Octave (MinGW port): http://wiki.octave.org/Octave_for_Microsoft_Windows#MinGW_ports
  * Eclipse CDT (32 bit) + CDT update site + CMakeEd plugin + EGit plugin
  * clink: http://mridgers.github.io/clink/

==== Mac OSX ====

  * XCode + command line tools
  * Git
  * CMake
  * MacPorts with autoconf

<code>sudo ports install autoconf</code>
  * R + Rcpp package
  * RStudio
  * MacTex
  * Matlab
  * Octave

<code>sudo ports install octave</code>
  * Eclipse CDT (64 bit) + CDT update site + CMakeEd plugin + EGit plugin


----

===== Compile Boost =====

==== Windows ====

Instructions for compiling boost libraries on Windows 7 64bit using gcc compiler from Rtools. gcc must be in the ''%%PATH%%'' e.g. ''%%C:\Rtools\gcc-4.6.3\bin%%''

  - Download Boost for Windows and extract the archive
  - Open console (''%%cmd%%'') and place yourself in the extracted folder
  - Compile Boost.Build using Visual C++ compiler. ''%%cl.exe%%'' must be in the ''%%PATH%%'' e.g. ''%%C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin%%''

<code>bootstrap</code>
<HTML><ol start="4" style="list-style-type: decimal;"></HTML>
<HTML><li></HTML>Compile the desired libraries for 64bit architecture and install in the subdirectory ''%%stage\lib%%''<HTML></li></HTML><HTML></ol></HTML>

<code>b2 toolset=gcc address-model=64 --build-type=complete --with-program_options stage</code>
<HTML><ol start="5" style="list-style-type: decimal;"></HTML>
<HTML><li></HTML>Compile the desired libraries for 32bit architecture and install in the subdirectory ''%%stage32\lib%%''<HTML></li></HTML><HTML></ol></HTML>

<code>b2 toolset=gcc address-model=32 --stagedir=stage32 --build-type=complete --with-program_options stage</code>
==== Mac OSX ====

Instructions for compiling boost libraries on Mac OSX using XCode compiler.

  - Download Boost for Linux and extract the archive
  - Open the terminal and place yourself in the extracted folder
  - Compile Boost.Build

<code>./bootstrap.sh</code>
<HTML><ol start="4" style="list-style-type: decimal;"></HTML>
<HTML><li></HTML>Compile the desired libraries and install in the subdirectory ''%%stage/lib%%''<HTML></li></HTML><HTML></ol></HTML>

<code>./b2 --build-type=complete --layout=versioned --with-program_options stage</code>

----

===== Manage sources =====

See http://git-scm.com/doc

and especially http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository

==== Clone remote repository ====

Anonymous access (read-only):

<code>git clone https://gforge.inria.fr/git/biips/biips.git</code>
GForge user access:

<code>git clone git+ssh://<username>@scm.gforge.inria.fr//gitroot/biips/biips.git</code>
==== Commit (local) ====

See status

<code>git status -s</code>
Add new files or files already tracked to STAGED zone

<code>git add file</code>
Commit STAGED zone

<code>git commit</code>
Commit STAGED zone and all modifications of files already tracked (without having to do ''%%git add%%'')

<code>git commit -a</code>
==== Push (remote) ====

<code>git push origin my_branch</code>
Ex. for master branch:

<code>git push origin master</code>
==== View all branches ====

<code>git branch -a</code>
==== Create new branch ====

<code>git branch new_branch [source_branch]
git checkout new_branch</code>
or

<code>git checkout -b new_branch [source_branch]</code>
==== Pull (remote) ====

<code>git pull origin my_branch</code>

----

===== Continuous integration =====

Continuous integration is hosted on [[https://ci.inria.fr/biips|Inria CI]].

You first need an account on CI website.

After logging in the CI website, go to //MyAccount// page and add your ssh public key.

Ask the Biips administrators to give you access to the project.

==== Slaves ====

  * Ubuntu 12.04 amd64
  * Windows 7 64bit

==== Connect to slaves ====

On CI website, go to your //Dashboard//.

In the Biips box, click //Manage Project// and then click //Slaves// on the left panel.

Click the //Connect// button on the desired slave to get connection commands that include your username.


----

===== Coding rules =====

==== Naming conventions ====

  * source file: ''%%MyClass.cpp%%''
  * header file: ''%%MyClass.hpp // one class by file%%''
  * class: ''%%MyClass%%''
  * private/protected member: ''%%myMember_%%''
  * public member: ''%%MyMember_%%''
  * private/protected method: ''%%myMethod%%''
  * public method: ''%%MyMethod%%''
  * argument: ''%%myArgument%%''
  * local variable: ''%%my_variable%%''
  * pointer: ''%%pObject, p_object, _pObject%%''
  * namespace: ''%%MyNamespace%%''
  * iterator: ''%%iter_container%%''
  * constant: ''%%MY_CONSTANT%%''
  * enum item: ''%%MY_ITEM%%''

==== Other rules ====

  * Everything is in the namespace ''%%Biips%%''

<code>#ifndef BIIPS_MYCLASS_HPP_
#define BIIPS_MYCLASS_HPP_

#endif /* BIIPS_MYCLASS_HPP_ */</code>
  * All primitive types are redefined in ''%%BiipsTypes.hpp%%''
  * destructor must be virtual
  * virtuel inherited methods must be declared virtual

==== Notes / Common errors ====

  * Do not use ''%%#ifndef #define%%'' in ''%%.cpp%%''
  * Do not access the content of a null pointer or shared_ptr null
  * Do not create a shared_ptr with an object not dynamically allocated
  * Do not define a template function in a source file (only in headers)
  * Library linking order : The traditional behavior of linkers is to search for external functions from left to right in the libraries specified on the command line. This means that a library containing the definition of a function should appear after any source files or object files which use it.
  * Do not pass-by-copy a polymorphic object

