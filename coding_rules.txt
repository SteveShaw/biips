========== Regles de codage ===========

* Nommage :
-----------
fichier source : UneClasse.cpp
fichier header : UneClasse.hpp // une classe par fichier + headers de headers
classe : UneClasse
attributs private/protected : unAttribut_
attribut public : UnAttribut_
methode private/protected : uneMethode
methode public : UneMethode
argument : unArgument
variable locale : une_variable
pointeur : pObjet, p_objet, _pObjet
namespace : UnNamespace
iterator : iter_conteneur
constante : UNE_CONSTANTE
item d'un enum : UN_ITEM

* Tout est contenu dans le namespace Biips
#ifndef BIIPS_UNECLASSE_HPP_
#define BIIPS_UNECLASSE_HPP_

#endif /* BIIPS_UNECLASSE_HPP_ */

* Tous les types primitifs sont redéfinis dans BiipsTypes.hpp

* Code
======
- destructeur virtuel
- déclaration virtuel des méthodes virtuelles héritées

* A Faire
---------
- mettre des const au maximum
- revoir la gestion objet/pointeur/référence
- organiser en sous-namespaces
- séparer interface-définitions
- inclure les dépendances #include
- commentaires

* Commentaires
--------------
- fonctions : au dessus de la signature (interface et définition)
 Ce que la fonction retourne en fonction de ses arguments
 Ce qu'elle effectue 
 
* Erreurs
---------
- Ne pas répeter #ifndef #define dans le .cpp !!!
- Ne pas déréférencer un pointeur ou shared_ptr null
- Ne pas créer un shared_ptr sur un objet non alloué dynamiquement : en effet,
 le compteur est à 1 et la destruction du shared_ptr entraîne la destruction
 de l'objet, puis deuxième destruction de l'objet à la fin de son bloc !!!
- Ne pas définir une fonction template dans le fichier source d'une
  bibliothèque (mais dans l'entete)
- Ordre de lien des bibliothèques : The traditional behavior of linkers is to search for external functions from left to right in the libraries specified on the command line. This means that a library containing the definition of a function should appear after any source files or object files which use it.
- ne pas passer un objet polymorphique par copie.

